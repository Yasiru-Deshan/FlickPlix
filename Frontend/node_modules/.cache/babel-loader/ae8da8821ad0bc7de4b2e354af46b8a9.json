{"ast":null,"code":"import axios from 'axios';\nimport { createMovieFailure, createMovieStart, createMovieSuccess, deleteMovieFailure, deleteMovieStart, deleteMovieSuccess, getMoviesFailure, getMoviesStart, getMoviesSuccess, updateMovieFailure, updateMovieStart, updateMovieSuccess } from './MovieActions';\nimport { getToken } from '../../components/mainpages/utils/common';\nexport const getMovies = async dispatch => {\n  dispatch(getMoviesStart());\n\n  try {\n    const res = await axios.get('http://localhost:8070/api/movies', {\n      headers: {\n        Authorization: getToken()\n      }\n    });\n    dispatch(getMoviesSuccess(res.data));\n  } catch (err) {\n    dispatch(getMoviesFailure());\n  }\n}; //create\n\nexport const createMovie = async (movie, dispatch) => {\n  dispatch(createMovieStart());\n\n  try {\n    const res = await axios.post('http://localhost:8070/api/movies', movie, {\n      headers: {\n        Authorization: getToken()\n      }\n    });\n    dispatch(createMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(createMovieFailure());\n  }\n}; //update\n\nexport const updateMovie = async (movie, dispatch) => {\n  dispatch(updateMovieStart());\n\n  try {\n    const res = await axios.put(`http://localhost:8070/api/movies/${movie._id}`, movie, {\n      headers: {\n        Authorization: getToken()\n      }\n    });\n    dispatch(updateMovieSuccess(res.data));\n  } catch (err) {\n    dispatch(updateMovieFailure());\n  }\n}; //delete\n\nexport const deleteMovie = async (id, dispatch) => {\n  dispatch(deleteMovieStart());\n\n  try {\n    await axios.delete('http://localhost:8070/api/movies/' + id, {\n      headers: {\n        Authorization: getToken()\n      }\n    });\n    dispatch(deleteMovieSuccess(id));\n  } catch (err) {\n    dispatch(deleteMovieFailure());\n  }\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/new/FlickPlix/frontend/src/context/movieContext/apiCalls.js"],"names":["axios","createMovieFailure","createMovieStart","createMovieSuccess","deleteMovieFailure","deleteMovieStart","deleteMovieSuccess","getMoviesFailure","getMoviesStart","getMoviesSuccess","updateMovieFailure","updateMovieStart","updateMovieSuccess","getToken","getMovies","dispatch","res","get","headers","Authorization","data","err","createMovie","movie","post","updateMovie","put","_id","deleteMovie","id","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACCC,kBADD,EAECC,gBAFD,EAGCC,kBAHD,EAICC,kBAJD,EAKCC,gBALD,EAMCC,kBAND,EAOCC,gBAPD,EAQCC,cARD,EASCC,gBATD,EAUCC,kBAVD,EAWCC,gBAXD,EAYCC,kBAZD,QAaO,gBAbP;AAcA,SAASC,QAAT,QAAyB,yCAAzB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAOC,QAAP,IAAoB;AAC5CA,EAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;;AACA,MAAI;AACH,UAAMQ,GAAG,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAU,kCAAV,EAA8C;AAC/DC,MAAAA,OAAO,EAAE;AACRC,QAAAA,aAAa,EAAEN,QAAQ;AADf;AADsD,KAA9C,CAAlB;AAKAE,IAAAA,QAAQ,CAACN,gBAAgB,CAACO,GAAG,CAACI,IAAL,CAAjB,CAAR;AACA,GAPD,CAOE,OAAOC,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACA;AAED,CAbM,C,CAeP;;AACA,OAAO,MAAMe,WAAW,GAAG,OAAOC,KAAP,EAAcR,QAAd,KAA2B;AAErDA,EAAAA,QAAQ,CAACb,gBAAgB,EAAjB,CAAR;;AACA,MAAI;AACH,UAAMc,GAAG,GAAG,MAAMhB,KAAK,CAACwB,IAAN,CACjB,kCADiB,EAEjBD,KAFiB,EAGjB;AACCL,MAAAA,OAAO,EAAE;AACRC,QAAAA,aAAa,EAAEN,QAAQ;AADf;AADV,KAHiB,CAAlB;AASAE,IAAAA,QAAQ,CAACZ,kBAAkB,CAACa,GAAG,CAACI,IAAL,CAAnB,CAAR;AACA,GAXD,CAWE,OAAOC,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACd,kBAAkB,EAAnB,CAAR;AACA;AACD,CAjBM,C,CAmBP;;AACA,OAAO,MAAMwB,WAAW,GAAG,OAAOF,KAAP,EAAcR,QAAd,KAA2B;AACrDA,EAAAA,QAAQ,CAACJ,gBAAgB,EAAjB,CAAR;;AACA,MAAI;AACH,UAAMK,GAAG,GAAG,MAAMhB,KAAK,CAAC0B,GAAN,CAChB,oCAAmCH,KAAK,CAACI,GAAI,EAD7B,EAEjBJ,KAFiB,EAGjB;AACCL,MAAAA,OAAO,EAAE;AACRC,QAAAA,aAAa,EAAEN,QAAQ;AADf;AADV,KAHiB,CAAlB;AASAE,IAAAA,QAAQ,CAACH,kBAAkB,CAACI,GAAG,CAACI,IAAL,CAAnB,CAAR;AACA,GAXD,CAWE,OAAOC,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACL,kBAAkB,EAAnB,CAAR;AACA;AAED,CAjBM,C,CAmBP;;AACA,OAAO,MAAMkB,WAAW,GAAG,OAAOC,EAAP,EAAWd,QAAX,KAAwB;AAElDA,EAAAA,QAAQ,CAACV,gBAAgB,EAAjB,CAAR;;AACA,MAAI;AACH,UAAML,KAAK,CAAC8B,MAAN,CAAa,sCAAsCD,EAAnD,EAAuD;AAC5DX,MAAAA,OAAO,EAAE;AACRC,QAAAA,aAAa,EAAEN,QAAQ;AADf;AADmD,KAAvD,CAAN;AAKAE,IAAAA,QAAQ,CAACT,kBAAkB,CAACuB,EAAD,CAAnB,CAAR;AACA,GAPD,CAOE,OAAOR,GAAP,EAAY;AACbN,IAAAA,QAAQ,CAACX,kBAAkB,EAAnB,CAAR;AACA;AAED,CAdM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n\tcreateMovieFailure,\r\n\tcreateMovieStart,\r\n\tcreateMovieSuccess,\r\n\tdeleteMovieFailure,\r\n\tdeleteMovieStart,\r\n\tdeleteMovieSuccess,\r\n\tgetMoviesFailure,\r\n\tgetMoviesStart,\r\n\tgetMoviesSuccess,\r\n\tupdateMovieFailure,\r\n\tupdateMovieStart,\r\n\tupdateMovieSuccess\r\n} from './MovieActions';\r\nimport { getToken } from '../../components/mainpages/utils/common';\r\n\r\nexport const getMovies = async (dispatch) => {\r\n\tdispatch(getMoviesStart());\r\n\ttry {\r\n\t\tconst res = await axios.get('http://localhost:8070/api/movies', {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: getToken()\r\n\t\t\t}\r\n\t\t});\r\n\t\tdispatch(getMoviesSuccess(res.data));\r\n\t} catch (err) {\r\n\t\tdispatch(getMoviesFailure());\r\n\t}\r\n\r\n};\r\n\r\n//create\r\nexport const createMovie = async (movie, dispatch) => {\r\n\r\n\tdispatch(createMovieStart());\r\n\ttry {\r\n\t\tconst res = await axios.post(\r\n\t\t\t'http://localhost:8070/api/movies',\r\n\t\t\tmovie,\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch(createMovieSuccess(res.data));\r\n\t} catch (err) {\r\n\t\tdispatch(createMovieFailure());\r\n\t}\r\n};\r\n\r\n//update\r\nexport const updateMovie = async (movie, dispatch) => {\r\n\tdispatch(updateMovieStart());\r\n\ttry {\r\n\t\tconst res = await axios.put(\r\n\t\t\t`http://localhost:8070/api/movies/${movie._id}`,\r\n\t\t\tmovie,\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: getToken()\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch(updateMovieSuccess(res.data));\r\n\t} catch (err) {\r\n\t\tdispatch(updateMovieFailure());\r\n\t}\r\n\r\n};\r\n\r\n//delete\r\nexport const deleteMovie = async (id, dispatch) => {\r\n\r\n\tdispatch(deleteMovieStart());\r\n\ttry {\r\n\t\tawait axios.delete('http://localhost:8070/api/movies/' + id, {\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: getToken()\r\n\t\t\t}\r\n\t\t});\r\n\t\tdispatch(deleteMovieSuccess(id));\r\n\t} catch (err) {\r\n\t\tdispatch(deleteMovieFailure());\r\n\t}\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}